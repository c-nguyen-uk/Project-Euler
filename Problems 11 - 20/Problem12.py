# -*- coding: utf-8 -*-
"""Problem 12: Highly divisible triangular number

https://projecteuler.net/problem=12

The sequence of triangle numbers is generated by adding the natural
numbers.  So the 7th triangle number would be
1 + 2 + 3 + 4 + 5 + 6 + 7 = 28.
The first ten terms would be:

1, 3, 6, 10, 15, 21, 28, 36, 45, 55, ...

Let us list the factors of the first seven triangle numbers:

 1: 1
 3: 1,3
 6: 1,2,3,6
10: 1,2,5,10
15: 1,3,5,15
21: 1,3,7,21
28: 1,2,4,7,14,28

We can see that 28 is the first triangle number to have over five
divisors.

What is the value of the first triangle number to have over five
hundred divisors?
"""
from custom_timer import computation_time


def triangular_number(n):
    """Return the nth triangular number."""
    return (n*(n+1))//2


def divisor_count(n):
    """Return the number of divisors of n."""
    divisors_count = 0
    for i in range(1, int(n ** 0.5 + 1)):
        if not n % i:
            if n / i == i:
                divisors_count += 1
            else:
                divisors_count += 2
    return divisors_count


@computation_time
def solution(k):
    """Return the solution, for more than k divisors."""
    divisors = 1
    n = 0
    while divisors < k:
        n += 1
        divisors = divisor_count(triangular_number(n))
    return triangular_number(n)


print(solution(500))
